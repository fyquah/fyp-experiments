type key.

free c:channel.		free loc2pub:channel.
free u0,u1:bitstring.	free fpc:bitstring.	
free slbD:bitstring.	free extend,seal,unseal:bitstring.


free tpmPf:bitstring[private].
free loc2priv:channel[private].
free b0:bitstring[private].
free s1,s2,s3,s4,s5:bitstring.
free symKey:key[private].
free usersecret:bitstring[private].

fun bt(bitstring):bitstring[private].
fun pk(key):key.
fun h(bitstring,bitstring):bitstring.
fun aenc(key,bitstring,bitstring):bitstring.
fun senc(key,bitstring):bitstring.

cell state :=  (b0,u1,false).

reduc forall x:key, y:bitstring, z:bitstring; adec(x,aenc(pk(x),y,z))	= z.
reduc forall x:key, y:bitstring; sdec(x,senc(x,y))	= y.


query attacker(symKey).
query attacker(usersecret).			(* Sanity check *)
(* query att:u,s1[]. *)			(* Sanity check *)
(* query att:u,s2[]. *)			(* Sanity check *)
(* query att:u,s3[]. *)			(* Sanity check *)
(* query att:u,s4[]. *)			(* Sanity check *)
(* query att:u,s5[]. *)			(* Sanity check *)


let Skinit =
	lock(state);
  	read state as (xBoot:bitstring,xPcr:bitstring,xFlag:bool);
	if xFlag = false then
	if xBoot = b0 then
	
	state := (bt(b0), h(u0,slbD), true);
	(* PAL operations start *)
	in(c, xSBlob:bitstring);
	in(c, xEncBlob:bitstring);
	out(loc2priv, (unseal,xSBlob));
	in(loc2priv, xSymKey:key);
	let xMessage = sdec(xSymKey, xEncBlob) in
	out(c, xMessage);
	(* PAL operations end *)

	read state as (xBoot':bitstring,xPcr':bitstring,xFlag':bool);
	state := (xBoot', h(xPcr',fpc), false);
	(* out(c,s1); *)
	unlock(state).


let Auxproc = 
	in(c, xEncBlob:bitstring);
	let xMessage = sdec(symKey,xEncBlob) in
	out(c, xMessage).
	

let Tpm(skSrk:key) =
	! (	
		(* Commands received from loc2priv *)
		lock(state);
		in(loc2priv, (xComName:bitstring,xSBlob:bitstring));
		(* TPM_UnSeal branch *)
		if xComName = unseal then
			let (xTpmPf:bitstring,xReqPCR:bitstring,xSecret:bitstring) = adec(skSrk, xSBlob) in
			if xTpmPf = tpmPf then
				read state as (xBoot:bitstring,xPcr:bitstring,xFlag:bool);
				if xPcr = xReqPCR then
				out(loc2priv, xSecret);
			(* out(c,s2); *)
		unlock(state)
	)
	|
	! (	
		(* Commands received from loc2pub *)		
		lock(state);
	  	read state as (xBoot:bitstring, xPcr:bitstring,xFlag:bool);
		if xFlag = false then
		new r:bitstring;
		in(loc2pub, xArgs:bitstring);
		(* TPM_Extend & TPM_UnSeal branches *)
		let (xComName:bitstring,xArg2:bitstring) = xArgs in
		(
			(* TPM_Extend branch *)	
			if xComName = extend then	
			(
			  	state := (xBoot, h(xPcr, xArg2), xFlag);
				(* out(c,s3); *)
			  	unlock(state)
			)
			(* TPM_UnSeal branch *)	
			else if xComName = unseal then
			(
			  	let (xTpmPf:bitstring,xReqPCR:bitstring,xSecret:bitstring) = adec(skSrk, xArg2) in 
			  	if xTpmPf = tpmPf then
			  	if xPcr = xReqPCR then
			  	out(loc2pub, xSecret);
				(* out(c,s4); *)
			  	unlock(state)
			)
		)
		(* TPM_Seal branch *)
		else
		let (xComName:bitstring,xReqPCR:bitstring,xInData:bitstring) = xArgs in
		(	
			if xComName = seal then
		  	out(loc2pub, aenc(pk(skSrk),r,(tpmPf,xReqPCR,xInData)));
			(* out(c,s5); *)
		  	unlock(state)
		)
	  ).


process
	(
		(* The platform state include (boot,pcr17,att_suspend) *)
		(
			(* private part of SRK *)
			new skSrk:key;	new r:bitstring;
			out(c, pk(skSrk));		
			(* Assuming the two enc-blobs are publicly known *)
			out(c, aenc(pk(skSrk),r,(tpmPf,h(u0,slbD),symKey)));
			out(c, senc(symKey,usersecret));
			( Tpm(skSrk) | !Skinit | !Auxproc )
		)
	)
