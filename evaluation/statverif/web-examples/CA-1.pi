free c.		free loc2pub.
free u0,u1.	free fpc.	
free slbC.	free extend,seal,unseal.

private free false,true.
private free tpmPf.
private free loc2priv.
private free b0.
private free s1,s2,s3,s4,s5.


fun pk/1.
fun h/2.
fun senc/2.
fun aenc/3.
fun sign/2.
fun tuple2/2.
fun tuple3/3.
private fun bt/1.


reduc sdec(x,senc(x,y)) 	= y.
reduc adec(x,aenc(pk(x),y,z))	= z.
reduc fst2(tuple2(x,y)) 	= x.
reduc snd2(tuple2(x,y)) 	= y.
reduc fst3(tuple3(x,y,z)) 	= x.
reduc snd3(tuple3(x,y,z)) 	= y.
reduc trd3(tuple3(x,y,z)) 	= z.

cell state := tuple3(b0,u1,false).

query attacker:skSignKey.
query attacker:sign(skSignKey,xCSR).	(* Sanity check *)
(* query att:u,s1[]. *)			(* Sanity check *)
(* query att:u,s2[]. *)			(* Sanity check *)
(* query att:u,s3[]. *)			(* Sanity check *)
(* query att:u,s4[]. *)			(* Sanity check *)
(* query att:u,s5[]. *)			(* Sanity check *)


let Skinit =				(* The Certification Authority *)
	lock(state);
  	read state as xState;
	let xBoot = fst3(xState) in
	let xPcr = snd3(xState) in
	let xFlag = trd3(xState) in
	if xFlag = false then
	if xBoot = b0 then

	state := tuple3(bt(b0), h(u0,slbC), true);
	(* PAL operation starts *)
	in(c,xCSR);
	in(c,xKeyBlob);
	out(loc2priv, tuple2(unseal, xKeyBlob));
	in(loc2priv, xskSignKey);
	let xCert = sign(xskSignKey,xCSR) in
	out(c,xCert);
	(* PAL operation ends *)

	read state as xState';
	let xBoot' = fst3(xState') in
	let xPcr' = snd3(xState') in
	state := tuple3(xBoot', h(xPcr',fpc), false);
	(* out(c,s1); *)
	unlock(state).


let Auxproc =
	in(c,xCSR);
	let xCert = sign(skSignKey,xCSR) in
	out(c,xCert).
	

let Tpm =
	! (	
		(* Commands received from loc2priv *)
		lock(state);
		in(loc2priv, xArgs);
		(* TPM_UnSeal branch *)
		let xComName = fst2(xArgs) in
		if xComName = unseal then
			let xSBlob = snd2(xArgs) in		
			let xTempData = adec(skSrk, xSBlob) in
			let xTpmPf = fst3(xTempData) in
			let xReqPCR = snd3(xTempData) in
			let xSecret = trd3(xTempData) in
			if xTpmPf = tpmPf then
				read state as xState;
				let xPcr = snd3(xState) in
				if xPcr = xReqPCR then
				out(loc2priv, xSecret);
			(* out(c,s2); *)
		unlock(state)
	)
	|
	! (	
		(* Commands received from loc2pub *)		
		lock(state);
	  	read state as xState;
		let xBoot = fst3(xState) in
		let xPcr = snd3(xState) in
		let xFlag = trd3(xState) in
		if xFlag = false then
		new r;
		in(loc2pub, xArgs);
		(* TPM_Extend & TPM_UnSeal branches *)
		let xComName = fst2(xArgs) in
		(
			(* TPM_Extend branch *)	
			if xComName = extend then	
			(
				let xHash = snd2(xArgs) in			
			  	state := tuple3(xBoot, h(xPcr, xHash), xFlag);
				(* out(c,s3); *)
			  	unlock(state)
			)
			(* TPM_UnSeal branch *)	
			else if xComName = unseal then
			(
			 	let xSBlob = snd2(xArgs) in		
			  	let xTempData = adec(skSrk, xSBlob) in
			  	let xTpmPf = fst3(xTempData) in
			  	let xReqPCR = snd3(xTempData) in
			  	let xSecret = trd3(xTempData) in
			  	if xTpmPf = tpmPf then
			  	if xPcr = xReqPCR then
			  	out(loc2pub, xSecret);
				(* out(c,s4); *)
			  	unlock(state)
			)
		)
		(* TPM_Seal branch *)
		else let xComName' = fst3(xArgs) in
		(	
			if xComName' = seal then
		  	let xReqPCR = snd3(xArgs) in
		  	let xInData = trd3(xArgs) in
		  	out(loc2pub, aenc(pk(skSrk),r,tuple3(tpmPf,xReqPCR,xInData)));
			(* out(c,s5); *)
		  	unlock(state)
		)
	  ).



process
	new state;
	(
		(* The platform state include (boot,pcr17,flag) *)
		(
			(* private part of SRK *)
			new skSrk;
			out(c, pk(skSrk));
			(* private part of any possible signing key *)
			new skSignKey;
			out(c, pk(skSignKey));
			new r;
			out(c, aenc(pk(skSrk),r,tuple3(tpmPf,h(u0,slbC),skSignKey)));
			( Tpm | !Skinit | !Auxproc )		(* The Certification Authority *)
		)
	)
