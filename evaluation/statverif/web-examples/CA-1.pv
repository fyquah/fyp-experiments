type key.

channel c.
free loc2priv:channel[private].

free loc2pub:channel.
free u0,u1:bitstring.	free fpc:bitstring.	
free slbC:bitstring.	free extend,seal,unseal:bitstring.

free ff,tt:bitstring [private].
free tpmPf:bitstring [private].
free b0:bitstring[private].
free s1,s2,s3,s4,s5:bitstring[private].
free skSignKey:key[private].
free xCertAttacker:bitstring[private].

fun pk(key):key.
fun h(bitstring,bitstring):bitstring.
fun aenc(key,bitstring,bitstring):bitstring.
fun sign(key,bitstring):bitstring.
fun bt(bitstring):bitstring[private].

reduc forall x:key, y:bitstring, z:bitstring; adec(x,aenc(pk(x),y,z))	= z.

cell state := (b0,u1,ff).  

query attacker(skSignKey).
query attacker(xCertAttacker).		(* Sanity check *)  


let Skinit =				(* The Certification Authority *)
    	lock(state);
  	read state as (xBoot:bitstring,xPcr:bitstring,xFlag:bitstring);
	if xFlag = ff then
	if xBoot = b0 then

	state := (bt(b0), h(u0,slbC), tt);
	(* PAL operation starts *)
	in(c,xCSR:bitstring);
	in(c,xKeyBlob:bitstring);
	out(loc2priv, (unseal, xKeyBlob));
	in(loc2priv, xskSignKey:key);
	let xCert = sign(xskSignKey,xCSR) in
	out(c,xCert);
	(* PAL operation ends *)

	read state as (xBoot':bitstring,xPcr':bitstring,xFlag':bitstring);
	state := (xBoot', h(xPcr',fpc), ff);
	(* out(c,s1); *)
	unlock(state);
	if xskSignKey = skSignKey then 	out(c,xCertAttacker).



let Auxproc(skSignKey:key) =
	in(c,xCSR:bitstring);
	let xCert = sign(skSignKey,xCSR) in
	out(c,xCert);
	out(c,xCertAttacker).
	

let Tpm(skSrk:key) =
	! (	
		(* Commands received from loc2priv *)
		lock(state);
		in(loc2priv, (xComName:bitstring,xSBlob:bitstring));
		(* TPM_UnSeal branch *)
		if xComName = unseal then
			let (xTpmPf:bitstring,xReqPCR:bitstring,xSecret:bitstring) = adec(skSrk, xSBlob) in
			if xTpmPf = tpmPf then
				read state as (xBoot:bitstring,xPcr:bitstring,xFlag:bitstring);
				if xPcr = xReqPCR then
				out(loc2priv, xSecret);
			(* out(c,s2); *)
		unlock(state)
	)
	|
	! (	
		(* Commands received from loc2pub *)		
		lock(state);
	  	read state as (xBoot:bitstring, xPcr:bitstring,xFlag:bitstring);
		if xFlag = ff then
		new r:bitstring;
		in(loc2pub, xArgs:bitstring);
		(* TPM_Extend & TPM_UnSeal branches *)
		let (xComName:bitstring,xArg2:bitstring) = xArgs in
		(
			(* TPM_Extend branch *)	
			if xComName = extend then	
			(
			  	state := (xBoot, h(xPcr, xArg2), xFlag);
				(* out(c,s3); *)
			  	unlock(state)
			)
			(* TPM_UnSeal branch *)	
			else if xComName = unseal then
			(
			  	let (xTpmPf:bitstring,xReqPCR:bitstring,xSecret:bitstring) = adec(skSrk, xArg2) in 
			  	if xTpmPf = tpmPf then
			  	if xPcr = xReqPCR then
			  	out(loc2pub, xSecret);
				(* out(c,s4); *)
			  	unlock(state)
			)
		)
		(* TPM_Seal branch *)
		else
		let (xComName:bitstring,xReqPCR:bitstring,xInData:bitstring) = xArgs in
		(	
			if xComName = seal then
		  	out(loc2pub, aenc(pk(skSrk),r,(tpmPf,xReqPCR,xInData)));
			(* out(c,s5); *)
		  	unlock(state)
		)
	  ).



process

		(* The platform state include (boot,pcr17,flag) *)
		(
			(* private part of SRK *)
			new skSrk:key;
			out(c, pk(skSrk));
			(* output public part of any possible signing key *)
			out(c, pk(skSignKey));
			new r:bitstring;
			out(c, aenc(pk(skSrk),r,(tpmPf,h(u0,slbC),skSignKey)));
			( Tpm(skSrk) | !Skinit | !Auxproc(skSignKey) )		(* The Certification Authority *)
		)
