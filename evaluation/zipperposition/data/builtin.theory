% Builtin theories and lemmas (new syntax)
% vim:softtabstop=2:

axiom (associative F) <-
  holds (![X,Y,Z]: [F X (F Y Z) = F (F X Y) Z]).

axiom (commutative F) <-
  holds (![X,Y]: [F X Y = F Y X]).

theory (ac F) <-
  axiom (associative F),
  axiom (commutative F).

axiom (associative F) <-
  theory (ac F).
axiom (commutative F) <-
  theory (ac F).

% a few general definitions (mostly form "rewriting, solving, proving")

axiom (involutive F) <-
  holds (![X]: [F (F X) = X]).

axiom (idempotent F) <-
  holds (![X]: [F X X = X]).

axiom (endomorphism {fun=H, op=Mult}) <-
  holds (![X,Y]: [H (Mult X Y) = Mult (H X) (H Y)]).

axiom (unit_endomorphism {fun=H, elem=E}) <-
  holds [H E = E].

axiom (anti_endomorphism {fun=H, op=Mult}) <-
  holds (![X,Y]: [H (Mult X Y) = Mult (H Y) (H X)]).

axiom (homomorphism {fun=H, op1=Mult, op2=Add}) <-
  holds (![X,Y]: [H (Mult X Y) = Add (H X) (H Y)]).

axiom (left_identity {op=Mult, elem=E}) <-
  holds (![X]: [Mult E X = X]).

axiom (right_identity {op=Mult, elem=E}) <-
  holds (![X]: [Mult X E = X]).

axiom (left_inverse {op=Mult, inverse=I, elem=E}) <-
  holds (![X]: [Mult (I X) X = E]).

axiom (right_inverse {op=Mult, inverse=I, elem=E}) <-
  holds (![X]: [Mult X (I X) = E]).

axiom (left_absorb {op=Mult, elem=E}) <-
  holds (![X]: [Mult E X = E]).

axiom (right_absorb {op=Mult, elem=E}) <-
  holds (![X]: [Mult X E = E]).

% functional relations

axiom (functional1 P) <-
  holds (![X,Y,Z]: [~ (P X Y), ~ (P X Z), Y = Z]).

axiom (total1 {pred=P, fun=F}) <-
  holds (![X]: [P X (F X)]).

axiom (functional2 P) <-
  holds (![X,Y,Z]: [~ (P X Y Z), ~ (P X Y Z2), Z = Z2]).

axiom (total2 {pred=P, fun=F}) <-
  holds (![X,Y]: [P X Y (F X Y)]).

pre_rewrite [![X,Y]: (P X Y --> (Y = F X))] <-
  axiom (functional1 P),
  axiom (total1 {pred=P, fun=F}).

pre_rewrite [![X,Y,Z]: (P X Y Z --> (Z = F X Y))] <-
  axiom (functional2 P),
  axiom (total2 {pred=P, fun=F}).

% monoid

theory (monoid {op=Mult, neutral=E}) <-
  axiom (left_identity {op=Mult, elem=E}),
  axiom (right_identity {op=Mult, elem=E}),
  axiom (associative Mult).

axiom (associative F) <-
  theory (monoid {op=F | R}).

% group

theory (group {op=Mult, neutral=E, inverse=I}) <-
  theory (monoid {op=Mult, neutral=E}),
  axiom (left_inverse {op=Mult, inverse=I, elem=E}),
  axiom (right_inverse {op=Mult, inverse=I, elem=E}).

theory (group {op=Mult, neutral=E, inverse=I}) <-
  axiom (associative Mult),
  axiom (left_inverse {op=Mult, inverse=I, elem=E}),
  axiom (left_identity {op=Mult, elem=E}).

theory (abelian_group {op=Mult, neutral=E, inverse=I}) <-
  theory (group {op=Mult, neutral=E, inverse=I}),
  axiom (commutative Mult).

theory (group {op=Mult, neutral=E, inverse=I}) <-
  theory (abelian_group {op=Mult, neutral=E, inverse=I}).

% FIXME
%rewrite
%  [ Mult ?x E --> ?x
%  , Mult E ?x --> ?x
%  , Mult ?x (I ?x) --> E
%  , Mult (I ?x) ?x --> E
%  , I E --> E
%  , I (I ?x) --> ?x
%  , I (Mult ?x ?y) --> Mult (I ?y) (I ?x)
%  , Mult (Mult ?x ?y) ?z --> Mult ?x (Mult ?y ?z)
%  , Mult ?x (Mult (I ?x) ?y) --> ?y
%  , Mult (I ?x) (Mult ?x ?y) --> ?y
%  ] <- theory (group {op=Mult, neutral=E, inverse=I}).

% FIXME
%rewrite
%  [ Mult ?x E --> ?x
%  , Mult ?x (I ?x) --> E
%  , I E --> E
%  , I (I ?x) --> ?x
%  , I (Mult ?x ?y) --> Mult (I ?x) (I ?y)
%  ] <- theory (abelian_group {op=Mult, neutral=E, inverse=I}).

% subgroup

theory (subgroup {op=Mult, neutral=E, inverse=I, mem=P}) <-
  theory (group {op=Mult, neutral=E, inverse=I}),
  holds [ P Some_element ],       % non-empty
  holds (![X]: [ ~ (P X), P (I X) ]),   % closed by inverse
  holds (![X,Y]: [ ~ (P X), ~ (P Y), P (Mult X Y) ]).  % closed by op

lemma [ P E ] <-
  theory (subgroup {mem=P, neutral=E | _}).

% ring theory

axiom (left_distributive {sum=Sum, prod=Prod}) <-
  holds (![X,Y,Z]: [ Prod X (Sum Y Z) = Sum (Prod X Y) (Prod X Z) ]).

axiom (right_distributive {sum=Sum, prod=Prod}) <-
  holds (![X,Y,Z]: [ Prod (Sum Y Z) X = Sum (Prod Y X) (Prod Z X) ]).


theory (ring {sum=Sum, prod=Prod, zero=Zero, one=One, minus=Minus}) <-
  theory (abelian_group {op=Sum, neutral=Zero, inverse=Minus}),
  theory (monoid {op=Prod, neutral=One}),
  axiom (left_distributive {sum=Sum, prod=Prod}),
  axiom (right_distributive {sum=Sum, prod=Prod}).

theory (commutative_ring {sum=Sum, prod=Prod, zero=Zero, one=One, minus=Minus}) <-
  theory (ring {sum=Sum, prod=Prod, zero=Zero, one=One, minus=Minus}),
  axiom (commutative Prod).

% FIXME
%rewrite
%  [ Sum ?x Zero --> ?x
%  , Sum ?x (Minus ?x) --> Zero
%  , Minus Zero --> Zero
%  , Minus (Minus ?x) --> ?x
%  , Minus (Sum ?x ?y) --> Sum (Minus ?x) (Minus ?y) % abelian group
%  , Prod ?x (Sum ?y ?z) --> Sum (Prod ?x ?y) (Prod ?x ?z)
%  , Prod (Sum ?x ?y) ?z --> Sum (Prod ?x ?z) (Prod ?y ?z)
%  , Prod ?x Zero --> Zero
%  , Prod ?x (Minus ?y) --> Minus (Prod ?x ?y)
%  , Prod Zero ?x --> Zero
%  , Prod (Minus ?x) ?y --> Minus (Prod ?x ?y)
%  ] <- theory (ring {sum=Sum, prod=Prod, zero=Zero, one=One, minus=Minus}).

% XXX omitted: boolean algebras

% basic relations

axiom (reflexive R) <-
  holds (![X]: [ R X X ]).

axiom (irreflexive R) <-
  holds (![X]: [ ~ (R X X) ]).

axiom (transitive R) <-
  holds (![X,Y,Z]: [ ~ (R X Y), ~ (R Y Z), R X Z ]).

axiom (antisymmetric R) <-
  holds (![X,Y,Z]: [ ~ (R X Y), ~ (R Y X), X = Y ]).

axiom (symmetric R) <-
  holds (![X,Y]: [ ~ (R X Y), R Y X ]).

% partial orders

theory (partial_order R) <-
  axiom (reflexive R),
  axiom (transitive R),
  axiom (antisymmetric R).

theory (strict_partial_order R) <-
  axiom (irreflexive R),
  axiom (transitive R).

% total orders

theory (non_strict_total_order R) <-
  theory (partial_order R),
  holds (![X,Y]: [ R X Y, R Y X ]).

theory (strict_total_order R) <-
  theory (partial_order R),
  holds (![X,Y]: [ R X Y, X = Y, R Y X ]).

theory (total_order {less=Less, lesseq=Lesseq}) <-
  theory (strict_total_order Less),
  holds (![X,Y]: [ X != Y, Lesseq X Y ]),
  holds (![X,Y]: [ ~ (Less X Y), Lesseq X Y ]),
  holds (![X,Y]: [ ~ (Lesseq X Y), X = Y, Less X Y ]).

theory (total_order {less=Less, lesseq=Lesseq}) <-
  theory (non_strict_total_order Lesseq),
  axiom (irreflexive Less),
  holds (![X,Y]: [ ~ (Less X Y), Lesseq X Y ]),
  holds (![X,Y]: [ ~ (Lesseq X Y), X = Y, Less X Y ]).

theory (strict_total_order Less) <-
  theory (total_order {less=Less | _}).

theory (non_strict_total_order Lesseq) <-
  theory (total_order {lesseq=Lesseq | _}).

% dense orders, orders without endpoints

axiom (no_higher_bound R) <-
  holds (![X]: [ R X (Some_successor X) ]).

axiom (no_higher_bound R) <-
  holds (![X]: ?[Some_successor]: [ R X Some_successor ]).

axiom (higher_bound {lesseq=Lesseq, high=High}) <-
  holds (![X]: [ Lesseq X High ]).

axiom (lower_bound {lesseq=Lesseq, low=Low}) <-
  holds (![X]: [ Lesseq Low X ]).

axiom (no_lower_bound R) <-
  holds (![X]: [ R (Some_predecessor X) X ]).

axiom (no_lower_bound R) <-
  holds (![X]: ?[Some_predecessor]: [ R Some_predecessor X ]).

theory (total_order_without_endpoints R) <-
  theory (strict_total_order R),
  axiom (no_lower_bound R),
  axiom (no_higher_bound R).

theory (dense_total_order R) <-
  theory (strict_total_order R),
  holds (![X,Y]: [ ~ (R X Y), R X (Middle X Y) ]),
  holds (![X,Y]: [ ~ (R X Y), R (Middle X Y) Y ]).

theory (dense_total_order_without_endpoints R) <-
  theory (total_order_without_endpoints R),
  theory (dense_total_order R).

% lattices

theory (semi_lattice Meet) <-
  theory (ac Meet),
  axiom (idempotent Meet).

theory (meet_semi_lattice {meet=Meet, order=Lesseq}) <-
  theory (semi_lattice Meet),
  theory (partial_order Lesseq),
  holds (![X,Y]: [ Lesseq (Meet X Y) X ]),
  holds (![X,Y]: [ Lesseq (Meet X Y) Y ]).

theory (join_semi_lattice {join=Join, order=Lesseq}) <-
  theory (semi_lattice Join),
  theory (partial_order Lesseq),
  holds (![X,Y]: [ Lesseq X (Join X Y) ]),
  holds (![X,Y]: [ Lesseq Y (Join X Y) ]).

axiom (absorption F1 F2) <-
  holds (![X,Y]: [ F1 X (F2 X Y) = X ]).

theory (lattice {meet=Meet, join=Join}) <-
  theory (semi_lattice Meet),
  theory (semi_lattice Join),
  axiom (absorption Meet Join),
  axiom (absorption Join Meet).

theory (ordered_lattice {order=Lesseq, meet=Meet, join=Join}) <-
  theory (lattice {meet=Meet, join=Join}),
  theory (meet_semi_lattice {meet=Meet, order=Lesseq}),
  theory (join_semi_lattice {join=Join, order=Lesseq}).

theory (complete_lattice {meet=Meet, join=Join, order=Lesseq, top=Top, bottom=Bottom}) <-
  theory (ordered_lattice {meet=Meet, join=Join, order=Lesseq}),
  axiom (lower_bound {lesseq=Lesseq, low=Bottom}),
  axiom (higher_bound {lesseq=Lesseq, high=Top}).


% inductive types

theory (nat_th {succ=(S:N ->N), zero=(Z:N)}) <-
  inductive @N {ty=@N, cstors=[(cstor _ S), (cstor _ Z)]}.

theory (peano_add {succ=S, zero=Z, plus=P}) <-
  theory (nat_th {succ=S, zero=Z}),
  holds (![X:N,Y:N]: [P (S X) Y = S (P X Y)]),
  holds (![X:N]: [P Z X = X]).

lemma (![X:N,Y:N]: [P X (S Y) = S (P X Y)]) <-
  theory (peano_add {succ=S, plus=P | _}).

lemma (![X:N]: [P X Z = X]) <-
  theory (peano_add {succ=_, zero=Z, plus=P}).

% commutativity
lemma (![X:N, Y:N]: [P X Y = P Y X]) <-
  theory (peano_add {succ=_, zero=_, plus=P}).

% associativity
lemma (![X:N, Y:N, Z:N]: [P (P X Y) Z = P X (P Y Z)]) <-
  theory (peano_add {succ=_, zero=_, plus=P}).

val list_th : /\ A /\ L {cons:A ->L ->L, nil:L} -> theory.

theory (list_th @A @L {cons=Cons, nil=Nil}) <-
  inductive @L {ty=@L, cstors=[(cstor _ Cons), (cstor _ Nil)]}.

val list_mem : /\ A /\ L {cons:A -> L -> L, nil: L, mem: A -> L -> $o} -> theory.

theory (list_mem @A @L {cons=Cons, nil=Nil, mem=Mem}) <-
  theory (list_th @A @L {cons=Cons, nil=Nil}),
  holds (![X:A]: [~ Mem X Nil]),
  holds (![X:A,Lst:L]: [Mem X (Cons X Lst)]),
  holds (![X:A,Y:A,Lst:L]: [~ (Mem X Lst), Mem X (Cons Y Lst)]).

val list_append : /\ A /\ L {cons:A ->L ->L, nil:L, append:L ->L ->L} -> theory.

theory (list_append @A @L {cons=Cons, nil=Nil, append=App}) <-
  theory (list_th @A @L {cons=Cons, nil=Nil}),
  holds (![L1:L]: [App Nil L1 = L1]),
  holds (![X:A, L1:L, L2:L]: [App (Cons X L1) L2 = Cons X (App L1 L2)]).

val len_sum : /\ A /\ L {cons:A ->L ->L, len:L -> $int} -> axiom.

axiom (len_sum @A @L {cons=Cons, len=Len}) <-
  holds (![X:A, L1:L]: [Len (Cons X L1) = $sum @$int 1 (Len L1)]).
axiom (len_sum @A @L {cons=Cons, len=Len}) <-
  holds (![X:A, L1:L]: [Len (Cons X L1) = $sum @$int (Len L1) 1]).

val list_len : /\A /\L {cons:A ->L ->L, nil:L, len:L -> $int} -> theory.

theory (list_len @A @L {cons=Cons, nil=Nil, len=Len}) <-
  theory (list_th @A @L {cons=Cons, nil=Nil}),
  holds [Len Nil = 0],
  axiom (len_sum @A @L {cons=Cons, len=Len}).

lemma (![L1:L]: [App L1 Nil = L1]) <-
  theory (list_append @A @L {append=App, nil=Nil | _}).

lemma (![X:A, L1:L, L2:L]:
  [ Len (App L1 (Cons X L2))
   = $sum @$int 1 ($sum @$int (Len L1) (Len L2))
  ]) <-
  theory (list_len @A @L {cons=Cons, len=Len, nil=Nil}),
  theory (list_append @A @L {append=App, cons=Cons, nil=Nil}).

val list_rev : /\A /\L {cons:A ->L ->L, nil:L, rev:L ->L, rev_append:L ->L ->L} -> theory.

theory (list_rev @A @L {cons=Cons, nil=Nil, rev=Rev, rev_append=Rev_append}) <-
  theory (list_th @A @L {cons=Cons, nil=Nil}),
  holds (![Lst:L]: [Rev Lst = Rev_append Nil Lst]),
  holds (![Lst:L]: [Rev_append Lst Nil = Lst]),
  holds (![X:A, L1:L, L2:L]: [Rev_append L1 (Cons X L2) = Rev_append (Cons X L1) L2]).

lemma (![Lst:L]: [Len (Rev Lst) = Len Lst]) <-
  theory (list_rev @A @L {rev=Rev | _}),
  theory (list_len @A @L {len=Len | _}).

lemma (![L1:L,L2:L]: [Len (Rev_append L1 L2) = $sum @$int (Len L1) (Len L2)]) <-
  theory (list_rev @A @L {rev_append=Rev_append | _}),
  theory (list_len @A @L {len=Len | _}).

